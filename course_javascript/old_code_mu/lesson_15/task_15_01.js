"use strict";

//		 << Использование пользовательских функций >>

/*
Советы:
1) Давайте функциям осмысленные имена
Старайтесь давать функциям осмысленные имена. Имя должно отражать то, что делает функция. Предположим, у нас есть функция, которая осуществляет валидацию (проверку правильности заполнения) формы.
Как лучше всего ее назвать? Как-нибудь так: validateForm. И напротив, имя validate или form не будет полностью отражать то, что делает эта функция.
В идеале вы должны посмотреть на имя функции и сразу определить то, что она делает, не заглядывая в ее код.
2) Не делайте их очень большими
Функции не должны быть очень большими. Нормальный размер - строк 10. Максимальный - 30 строк.
Если в вашей функции получается больше 30 - задумайтесь о том, чтобы разбить ее на несколько функций.
3) Одна функция - одна задача
Функции не должны быть многозадачными. Правило такое: одна функция должна выполнять только одну задачу.
Предположим, перед вами стоит задача: при регистрации пользователя проверить, не занято ли такое имя, и если не занято - сохранить его в базу данных. Велик соблазн сделать все одной функцией, которая будет проверять, а потом сохранять.
Однако это неправильно. Лучше будет сделать две функции: одна проверяет, а вторая сохраняет.
4) Используйте функции внутри функций
Это правило вытекает из предыдущего - внутри функций можно и нужно использовать другие функции, вспомогательные.
5) Делайте ваши функции универсальными
Старайтесь делать ваши функции как можно более универсальными. Тот проект, который вы делаете сейчас - не последний в вашей жизни и написанные функции вы наверняка будете использовать в будущем. Поэтому при создании новой функции выделите пару минут и хорошо подумайте над ее именем, параметрами и их порядком (с точки зрения удобства).
*/

/*
//Задача №1: пусть дан массив с числами, давайте запишем в новый массив только те элементы, сумма цифр в которых от 1 до 9.

//переданное число необходимо преобразовать в строку с помощью String
function getDigits(num) {
	return String(num).split('');
}

//сумма цифр заданного числа
function arraySum(arr) {
	var sum = 0;
	for (var i = 0; i < arr.length; i++) {
		sum += Number(arr[i]);
	}

	return sum;
}

//если сумма цифр этого числа от 1 до 9, то  вернет true, если это не так - false.
function inRange(num) {
	var sum = arraySum(getDigits(num));
	return sum >= 1 && sum <= 9;
}

//alert(getDigits(123)); //выведет ['1', '2', '3']

//var sum = arraySum(getDigits(123));
//alert(sum); //выведет 6

var arr = [12, 19, 28, 13, 14, 345];
var result = [];

for (var i = 0; i < 10; i++) {
	if (inRange(arr[i])) {
		result.push(arr[i]);
	}
}

alert("результат = " + result);
*/

//Задача №2. Дан массив с числами. Создайте из него новый массив, где останутся лежать только положительные числа. Создайте для этого вспомогательную функцию isPositive(), которая параметром будет принимать число и возвращать true, если число положительное, и false - если отрицательное.

var arr = [1, 2, 3, -1, -2, -3];

function isPositive(num) {
	return num >= 0 ? true : false;
}

var newArr = [];
for (var i = 0; i < arr.length; i++) {
	if (isPositive(arr[i])) {
		newArr.push(arr[i]);
	}
}
console.log(newArr);