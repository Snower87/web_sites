"use strict";

//1. Свойство length позволяет узнать длину строки. Под длиной понимается количество символов в ней.
//Синтаксис: строка.length
//Пример 1:
//let str = 'abcde';
//alert(str.length);

//2. Метод toUpperCase производит преобразование строки в верхний регистр (из маленьких букв делает большие). При этом возвращается новая строка, а исходная строка не меняется.
//let str = 'Язык JavaScript';
//alert(str.toUpperCase());

//3. Метод toLowerCase производит преобразование строки в нижний регистр (из больших букв делает маленькие). При этом возвращается новая строка, а исходная строка не меняется.
//let str = 'Язык JAVASCRIPT';
//console.log(str.toLowerCase()); // -> 'язык javascript'

//4. Метод substr возвращает подстроку из строки (исходная строка при этом не изменяется).
//Синтаксис: строка.substr(откуда отрезать, [сколько символов отрезать])

// Первый параметр задает номер символа, с которого метод начинает отрезать (учтите, что нумерация с нуля), а второй параметр - сколько символов отрезать.
// Первый параметр может принимать отрицательные значения. В этом случае отсчет символа, с которого начинается обрезание, будет идти с конца строки. Причем последний символ имеет номер -1, предпоследний - -2 и так далее.
// Второй параметр не является обязательным, если он не указан, то вырезаны будут все символы до конца строки.

//Пример 1. Пусть дана строка. Давайте вырежем из нее первые 3 символа:
//let str = 'abcde';
//let sub = str.substr(0, 3);
//console.log(sub); // -> 'abc'

//Пример 2. Давайте теперь вырежем символы с 2-ой позиции и до конца строки (для этого не зададим второй параметр метода):
//let str = 'abcde';
//let sub = str.substr(2);
//console.log(sub); // -> 'cde'

//Пример 3. Давайте вырежем подстроку с 3-го символа с конца и возьмем 2 символа:
//let sub = str.substr(-3, 2); // -> 'cd'

//Пример 4. А теперь давайте вырежем подстроку с 3-го символа с конца и возьмем всю оставшуюся строку до конца (для этого не зададим второй параметр метода):
//let sub = str.substr(-3); // -> 'cde'

//Пример 5. Давайте вырежем последний символ строки:
//let str = 'abcde';
//let sub = str.substr(-1);
//console.log(sub); // -> 'e'

//5. Метод substring
//Синтаксис: строка.substring(откуда начать отрезать, [докуда отрезать])

//Метод substring возвращает подстроку из строки (исходная строка при этом не изменяется).

//Первый параметр задает номер символа, с которого метод начинает отрезать (учтите, что нумерация с нуля), а второй параметр - номер символа, на котором следует закончить вырезание (символ с этим номером не включается в вырезанную часть).

//Второй параметр не является обязательным, если он не указан, то вырезаны будут все символы до конца строки.

//Если первый параметр больше второго, тогда substring ведет себя, как будто они поменялись местами. Например, написать str.substring(3, 0) все равно что написать str.substring(0, 3).

//Если какой-то из параметров больше, чем длина строки - он считается равным длине строки.
//Отрицательные значения приравниваются к нулю.

//Пример 1. Пусть дана строка. Давайте вырежем из нее символы с 1-го по 3-тий:
//let str = 'abcde';
//let sub = str.substring(1, 3);
//console.log(sub); // -> 'bc'

//Пример 2. Давайте теперь вырежем символы с 1-го и до конца строки (для этого не зададим второй параметр метода):
//let str = 'abcde';
//let sub = str.substring(1);
//console.log(sub); // -> 'bcde'

//6. Метод slice возвращает подстроку из строки (исходная строка при этом не изменяется).
//Синтаксис: строка.slice(откуда отрезать, [докуда отрезать])

//Первым параметром указывается номер символа строки, с которого начинается вырезание, а вторым параметром - номер символа, на котором закончится вырезание (при этом символ с этим номером не включится в вырезанную часть).

//Второй параметр не является обязательным. Если его не указать - подстрока возьмется с указанного в первом параметре символа до конца строки.

//Второй параметр также может принимать отрицательные значения. В этом случае отсчет символа, на котором закончится обрезание, начинается с конца строки. Причем последний символ имеет номер -1, предпоследний - -2 и так далее.

//К примеру, если написать slice(1, -1), то вырезанная часть возьмется с первого символа включительно по последний не включая его. Если вам нужно включить и последний символ - нужно просто не задавать второй параметр для slice, вот так: slice(1).

//Если второй параметр меньше первого - возвратится пустая строка.

//Пример 1. Пусть дана строка. Давайте вырежем из нее символы с 1-го по 3-тий:
//let str = 'abcde';
//let sub = str.slice(1, 3);
//console.log(sub); // -> 'bc' (символ с номером 3 не включится в вырезанную часть)

//Пример 2. Давайте теперь вырежем символы с 1-го и до конца строки (для этого не зададим второй параметр метода):
//let str = 'abcde';
//let sub = str.slice(1);
//console.log(sub); // -> 'bcde'

//Пример 3. Давайте теперь вырежем символы с позиции 1 по позицию -2:
//let str = 'abcde';
//let sub = str.slice(1, -2);
// console.log(sub); // -> 'bc'  (символ с номером -2 не включится в вырезанную часть)

//7. Метод indexOf осуществляет поиск подстроки (указывается первым параметром) в строке.
//Синтаксис: строка.indexOf(что ищем, [откуда начинать поиск]);

//Метод вернет позицию первого совпадения, а если оно не найдено, то вернет -1.

//Вторым параметром (он необязателен) можно передать номер символа, откуда следует начинать поиск.

//Метод чувствителен к регистру символов.

//Пример 1. В данном примере в строке 'Я учу учу Javascript' ищется слово 'учу'. Метод вернет 2 (с этой позиции начинается первое слово 'учу' в строке):
//let str = 'Я учу учу Javascript';
//console.log(str.indexOf('учу')); // -> 2

//Пример 2. В данном примере в строке 'Я учу учу Javascript' также ищется слово 'учу', однако поиск начинается с 5-той позиции (я указал это вторым параметром). Метод вернет 6 (с этой позиции начинается второе слово 'учу' в строке):
//let str = 'Я учу учу Javascript';
//console.log(str.indexOf('учу', 5)); // -> 6

//Пример 3. В данном примере метод вернет -1, так как подстроки 'PHP' в строке 'Я учу Javascript' нету:
//let str = 'Я учу Javascript';
//console.log(str.indexOf('PHP', 5)); // -> -1

//Пример 4. В данном примере метод вернет -1, так как он чувствителен к регистру (Javascript не равно JaVaScrIpt):
//let str = 'Я учу Javascript';
//console.log(str.indexOf('JaVaScrIpt')); // -> -1

//Пример 5. В данном примере метод вернет -1, так как после выбранной позиции совпадения отсутствуют:
//let str = 'Я учу Javascript';
//console.log(str.indexOf('учу', 8)); // -> -1

//8. Метод replace

//9. Метод split осуществляет разбиение строки в массив по указанному разделителю.
//Синтаксис: строка.split([разделитель], [максимальное количество элементов])

//Разделитель указывается первым необязательным параметром. Если он не задан - вернется вся строка. Если он задан как пустые кавычки '' - то каждый символ строки попадет в отдельный элемент массива.

//Вторым необязательным параметром можно указать максимальное количество элементов в получившемся массиве

//Пример 1. Пусть дана некоторая строка с дефисами. Давайте разобьем эту строку в массив по разделителю '-':
//let str = 'html-css-javascript';
//let arr = str.split('-');
//console.log(arr); // -> ['html', 'css', 'javascript']

//Пример 2. Давайте опять разобьем строку по разделителю '-', однако вторым параметром укажем максимальное количество элементов в получившемся массиве, например, 2.
//В этом случае в массив запишется только 2 элемента:
//let str = 'html-css-javascript';
//let arr = str.split('-', 2);
//console.log(arr); // -> ['html', 'css']

//Пример 3. Давайте каждый символ строки запишем в отдельный элемент массива:
//let str = 'abcde';
//let arr = str.split('');
//console.log(arr); // -> ['a', 'b', 'c', 'd', 'e']

//Пример 4. Давайте первые 3 символа строки запишем в отдельный элемент массива:
//let str = 'abcde';
//let arr = str.split('', 3);
//console.log(arr); // -> ['a', 'b', 'c']

//Пример 5. Сейчас с помощью split разбивается строка с числами. Обратите внимание на то, что в результате получится массив строк ['1', '2', '3', '4', '5'], а не массив чисел [1, 2, 3, 4, 5]:
//let str = '12345';
//let arr = str.split('');
//console.log(arr); // -> ['1', '2', '3', '4', '5']

//Пример 6. Давайте перевернем символы строки в обратном порядке. Для этого разобьем строку в массив с помощью split по разделителю '' (это разместит каждый символ строки в отдельный элемент массива), перевернем этот массив с помощью reverse и затем сольем перевернутый массив обратно с помощью join:
//let str    = '123456789';
//let arr1   = str.split('');
//let arr2   = arr1.reverse();
//let result = arr2.join('');
//console.log(result); // -> '987654321'

//Пример 7. Упростим решение предыдущей задачи - сольем все команды в цепочку:
//let str = '123456789';
//let result = str.split('').reverse().join('');
//console.log(result); // -> '987654321'

//Пример 8. Дана строка с цифрами. Найдем сумму цифр из этой строки. Для этого разобьем строку в массив, а затем переберем этот массив и найдем его сумму. Нас ждет подвох: split возвращает строки, поэтому при суммировании преобразуем эти цифры-строки в настоящие числа с помощью Number:
//let str = '12345';
//let arr = str.split('');
//let sum = 0;
//for (let i = 0; i < arr.length; i++) {
//	sum += Number(arr[i]);
//}
//console.log(sum); // -> 15

//Пример 9. Дано число. Давайте запишем каждую цифру этого числа в отдельный элемент массива. Тут есть подвох - split применяется только к строкам, а у нас число. Преобразуем вначале число к строке с помощью String, а затем применим split:
//let num = 12345;
//let str = String(num);
//let arr = str.split('');
//console.log(arr); // -> ['1', '2', '3', '4', '5']

//10. Функция join сливает строку в массив с указанным разделителем.

//Эта функция является полным аналогом функции implode, смотрите ее описание для полного понимания.

//11. Функция implode сливает массив в строку с указанным разделителем.

//Синтаксис: implode(разделитель, массив);
//Пример 1:
//Давайте сольем массив ['a', 'b', 'c', 'd', 'e'] в строку 'a-b-c-d-e':
//let arr = ['a', 'b', 'c', 'd', 'e'];
//console.log(arr.join('-')); // -> 'a-b-c-d-e'